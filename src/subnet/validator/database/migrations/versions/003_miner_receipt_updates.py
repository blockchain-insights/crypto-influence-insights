"""Miner receipt updates

Revision ID: 003
Revises: 002
Create Date: 2024-12-10 14:19:04.687395

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '003'
down_revision: Union[str, None] = '002'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('miner_discoveries', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_column('miner_discoveries', 'is_trusted')
    op.add_column('miner_receipts', sa.Column('validator_key', sa.String(), nullable=False))
    op.add_column('miner_receipts', sa.Column('query', sa.Text(), nullable=True))
    op.add_column('miner_receipts', sa.Column('result_hash', sa.Text(), nullable=False))
    op.add_column('miner_receipts', sa.Column('result_hash_signature', sa.Text(), nullable=False))
    op.add_column('miner_receipts', sa.Column('response_time', sa.Float(), nullable=False))
    op.alter_column('miner_receipts', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.create_index('idx_miner_receipts_miner_key_timestamp', 'miner_receipts', ['miner_key', 'timestamp'], unique=False, postgresql_using='btree')
    op.create_index('idx_miner_receipts_timestamp', 'miner_receipts', ['timestamp'], unique=False, postgresql_using='btree')
    op.create_index('idx_miner_receipts_token_timestamp', 'miner_receipts', ['token', 'timestamp'], unique=False, postgresql_using='btree')
    op.create_index('idx_miner_receipts_validator_key_timestamp', 'miner_receipts', ['validator_key', 'timestamp'], unique=False, postgresql_using='btree')
    op.drop_column('miner_receipts', 'accepted')
    op.create_unique_constraint(op.f('uq__tweet_cache__tweet_id'), 'tweet_cache', ['tweet_id'])
    op.create_unique_constraint(op.f('uq__user_cache__user_id'), 'user_cache', ['user_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq__user_cache__user_id'), 'user_cache', type_='unique')
    op.drop_constraint(op.f('uq__tweet_cache__tweet_id'), 'tweet_cache', type_='unique')
    op.add_column('miner_receipts', sa.Column('accepted', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_index('idx_miner_receipts_validator_key_timestamp', table_name='miner_receipts', postgresql_using='btree')
    op.drop_index('idx_miner_receipts_token_timestamp', table_name='miner_receipts', postgresql_using='btree')
    op.drop_index('idx_miner_receipts_timestamp', table_name='miner_receipts', postgresql_using='btree')
    op.drop_index('idx_miner_receipts_miner_key_timestamp', table_name='miner_receipts', postgresql_using='btree')
    op.alter_column('miner_receipts', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_column('miner_receipts', 'response_time')
    op.drop_column('miner_receipts', 'result_hash_signature')
    op.drop_column('miner_receipts', 'result_hash')
    op.drop_column('miner_receipts', 'query')
    op.drop_column('miner_receipts', 'validator_key')
    op.add_column('miner_discoveries', sa.Column('is_trusted', sa.INTEGER(), autoincrement=False, nullable=False))
    op.alter_column('miner_discoveries', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    # ### end Alembic commands ###
